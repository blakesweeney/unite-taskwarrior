*unite-taskwarrior.txt*  For |Vim version 7.3|       Last change: 2015 Sept 13

Version: 0.0.1
Author: Blake Sweeney
License: Same terms as vim itself (see |license|)

|CONTENTS|                                   |unite-taskwarrior-contents|

Installation                                 |unite-taskwarrior-install|
About                                        |unite-taskwarrior-about|
Usage                                        |unite-taskwarrior-usage|
  Commands                                   |unite-taskwarrior-commands|
  Configuration                              |unite-taskwarrior-configuration|
  Unite Source                               |unite-taskwarrior-sources|
    taskwarrior                              |unite-taskwarrior_source|
    taskwarrior/annotate                     |unite-taskwarrior_annotate|
    taskwarrior/annotations                  |unite-taskwarrior_annotations|
    taskwarrior/cmd                          |unite-taskwarrior_cmd|
    taskwarrior/depends                      |unite-taskwarrior_depends|
    taskwarrior/new                          |unite-taskwarrior_new|
    taskwarrior/notes                        |unite-taskwarrior_notes|
    taskwarrior/projects                     |unite-taskwarrior_projects|
    taskwarrior/tags                         |unite-taskwarrior_tags|
  Unite Filters                              |unite-taskwarrior-filters|
    sorter_count                             |unite-taskwarrior-sorter_count|
    sorter_task                              |unite-taskwarrior-sorter_task|
  Common Actions                             |unite-taskwarrior-actions|
  Note Files                                 |unite-taskwarrior-notes|
  Functions                                  |unite-taskwarrior-functions|
    Annotation functions
    Context functions
    Filter functions
    Formatting functions
    Notes functions
    Project functions
    Tag functions
    Task functions
    Taskwiki integration functions
    Utility functions

==============================================================================
About                                                *unite-taskwarrior-about*

This is a unite source for `taskwarrior`, which provides a way to browse and
manipulate taskwarrior tasks from inside vim. It uses |unite.vim| as the
interface. To get the most functionality out of this, I recommend getting
familiar with |unite.vim| as well.

This is meant to provide a way to view and manipulate tasks, as well as
provide some common and useful features on top, such as note taking.

This provides a couple useful functions, described in
|unite-taskwarrior-commands|, but the main functionality are unite sources
described in |unite-taskwarrior-sources|.

==============================================================================
Installation                                       *unite-taskwarrior-install*

Copy files into the correct places, or just use a package manager. For
example, with |neobundle|.

>
  NeoBundle 'blakesweeney/unite-taskwarrior'
>
==============================================================================
Usage                                                *unite-taskwarrior-usage*

This does not come with any key bindings outside of unite buffers. Personally
I find the follow ones very useful:

In my |vimrc|: >
  call unite#custom#source('taskwarrior', 'matchers', 'matcher_fuzzy')

  nnoremap <silent>  <Leader>Tl :Unite taskwarrior taskwarrior/new
        \ -hide-source-names
        \ -winheight=50<CR>
  nnoremap <silent>  <Leader>TL :Unite taskwarrior -custom-infer-project=1<CR>
  nnoremap <silent>  <Leader>Tp :Unite taskwarrior/projects<CR>
  nnoremap           <Leader>Ta :UniteTaskWarriorAdd<CR>
  vnoremap <silent>  <Leader>Ta :B UniteTaskWarriorAdd<CR>
<

This makes my listing show the pending tasks and gives me useful mappings to
open and add tasks. Also, by using the matcher and sorder I get a nice
responsive search in my tasks.

In `ftplugin/unite.vim`: >
  inoremap <silent><buffer><expr> <C-t> unite#do_action('edit_tag')
  nnoremap <silent><buffer><expr> <C-t> unite#do_action('edit_tag')
  nnoremap <silent><buffer><expr> <C-D> unite#do_action('add_dependency')
<
This lets me edit the tags quickly. I end up doing this a lot so it's useful
to have.

==============================================================================
Commands                                            *unite-taskwarrior-commands*

*UniteTaskWarriorAdd*

This command can create a new task. If run with no arguments and no visual
selection it will prompt for a new task description, which it will then
create. If run with a visual selection it will use the selection as the
description. Vim will pass the entire line, not just the selected section to
this command when using a visual selection. This could lead to undesired
behavior, if you want to only use the selected region then you should install
the vis plugin, which will allow you to send only the selected region to this
command. Finally if this run with arguments they will be used as the task
description. Below are a couple examples of creating a task using arguments.

Examples: >
  " Create a new task 'Some new task'
  :UniteTaskWarriorAdd Some new task

  " Create a new task for project1
  :UniteTaskWarriorAdd A new task for project:project1

  " Create a new task with tag bob
  :UniteTaskWarriorAdd A task tag:bob

  " Create a new task with tags and a project
  :UniteTaskWarriorAdd Another new task tag:bob project:something
<

These examples only show adding tags and projects but all of the normal
taskwarrior syntax should be respected.

*UniteTaskWarriorUndo*

Undo the last action. This will call taskwarrior's, undo command to undo the
last action. This does not depends on the vim interface being used to do an
action.

==============================================================================
Variables                                    *unite-taskwarrior-configuration*

There are two ways to configure utw. The first is through the standard setting
of global variables. The second is to use function calls. As global variables
are more commonly used that will be described first. If you perfer not to
clutter up your setup with lots of global variables read
|unite-taskwarrior-func-config| below.

*g:unite_taskwarrior_command*

The command to use to call taskwarrior.

Default: "task"

*g:unite_taskwarrior_note_directory*

Define the directory that all notes will reside in.

Default: "~/.task/note"

*g:unite_taskwarrior_note_suffix*

Define the suffix for the note file.

Default: "mkd"

*g:unite_taskwarrior_note_formatter* 

The formatter to use for note files.

Default: 'unite#taskwarrior#formatters#description',

*g:unite_taskwarrior_formatter*

This should be a string of the function name to use for formatting a task for
display in unite. The function specified should take as input a task dictionary
and return the string to display.

Default: "unite#taskwarrior#format"

*g:unite_taskwarrior_tag_formatter*

The name of the function to use for formatting tags for display in the
taskwarrior/tags source. This function should take a tag data structure and
return a string to display. The default function uses
|g:unite_taskwarrior_tag_format_string|

Default: "unite#taskwarrior#tags#format"

*g:unite_taskwarrior_project_formatter*

The name of the function to use for formatting projects for display in the
taskwarrior/projects source. The function should take a project dictionary and
return the string to display. The default function uses the
|g:unite_taskwarrior_project_format_string|

Default: "unite#taskwarrior#projects#format"

*g:unite_taskwarrior_filter*

The default filter to use for loading tasks. If more than one filter is
desired it is safest to use an array of strings instead of one long string.
For example: >
let g:unite_taskwarrior_filter = ['status:pending', 'tags.hasnt:long-term']
<

Default: "status:pending"

*g:unite_taskwarrior_toggle_mapping*

This is a dictionary specifying the transitions to use when toggling. The keys
are the current state and the values are the state to transition to. All keys
and values should be valid states for tasks.

Default: { "pending", "completed", "completed": "pending" }

*g:unite_taskwarrior_status_mapping*

This is a dictionary is used to map from a status to the symbol to use when
displaying a task.

*g:unite_taskwarrior_add_annotations*

The unite kinds to add an annotation action to. For details of what this does
see common actions below.

Default: ["common"]

*g:unite_taskwarrior_respect_context*

A integer to indicate if we should respect the currently set context in all
searches. This will mean all searches will respect the context unless told not
to. Examples of that include when sources get the '-custom-ignore-context=1'
option or using the context source.

Default: 0

------------------------------------------------------------------------------
Function configuration                         *unite-taskwarrior-func-config*

This is done by doing: >
  call unite#taskwarrior#config('respect_context': 1)
  call unite#taskwarrior#config('add_annotations': 1)
<
You can also pass in a dictionary of all settings like: >
  call unite#taskwarrior#config({
        \ 'respect_context': 1,
        \ 'add_annotations: 1,
        \ })
<
Values not present in the dictionary will use default ones. Values which are
dictionaries should include all the key/value pairs, as those default values
aren't merged in.

The key names for this style of configuration are the same as global variables
but with the leading 'unite-taskwarrior-' stripped off.

==============================================================================
Unite Sources                                      *unite-taskwarrior-sources*

This provides several different unite sources as well as modifying unite
sources to add an annotation action. The full list sources is:

taskwarrior                                   |unite-taskwarrior_taskwarrior|
  A source for displaying tasks

taskwarrior/annotate                             |unite-taskwarrior_annotate|
  A source for adding annotations to tasks

taskwarrior/annotations                       |unite-taskwarrior_annotations|
  A source for displaying annotations from tasks

taskwarrior/cmd                                       |unite-taskwarrior_cmd|
  A source to run specific commands

taskwarrior/context                                |unite-taskwarrior_context|
  A source to list contexts

taskwarrior/depends                                |unite-taskwarrior_depends|
  A source for adding dependencies of tasks

taskwarrior/new                                        |unite-taskwarrior_new|
  A source for creating new tasks

taskwarrior/notes                                   |taskwarrior-source-notes|
  A source for browsing task notes

taskwarrior/projects                              |unite-taskwarrior_projects|
  A source to list all projects

taskwarrior/tags                                      |unite-taskwarrior_tags|
  A source to list all tags

In addition, this adds an action to the common source. This action allows the
given input to be used as annotations on tasks. See
|unite-taskwarrior-common-actions| for details.

------------------------------------------------------------------------------
taskwarrior                                    *unite-taskwarrior_taskwarrior*

This source shows tasks using their description, state, tags and project.

Actions~

add_dependency

Add a dependency to the selected tasks. This will open up another unite buffer
of all tasks. The selected tasks will be used as dependencies of the parent
tasks.

annotate

Add an annotation to one or more tasks. This will prompt for some annotation
and add it to the selected tasks.

edit

Edit the description of this task. This will prompt for a new description.

Key: "e"

delete

Mark one or more tasks as deleted.

do

Mark one or more tasks as done.

Key: "<CR>"

edit_tag

Edit the tags for one or more tasks. This will prompt for a comma separated
string where each part is a tag to assign to the task.

edit_proj

Edit the project for one or more tasks. This will prompt for a project to
assign to the tasks.

open

Open a note file for this task. For details on note files, see
|unite-taskwarrior-notes|

Key: "o"

modify

Run a modification on one or more tasks. This will prompt for some
modification string and pass that to taskwarrior. This should respect the
standard taskwarrior syntax.

preview

Preview the note file for this task.

Key: "p"

start

Start a task. Will mark the task as started in taskwarrior.

stop

Stop a task. Will mark the task as stopped in taskwarrior.

toggle

Toggle state of one or more tasks.

yank

This will yank the uuid of a task.

yank_uri

Yank a task uri.

view

Show detailed information about this task. The

Key: "v"

------------------------------------------------------------------------------
taskwarrior/depends                                *unite-taskwarrior_depends*

Generally this shouldn't be called directly. It is called by the depends action
in other sources.

A source to add dependencies of the task. This task requires a list of task
uuids as arguments. These will be used as the parent tasks in the modifications.
One or more tasks may be given.

Actions~

add_dependency

Default key <CR>. This will mark the given tasks as dependencies of the tasks
in the arguments.

------------------------------------------------------------------------------
taskwarrior/context                                *unite-taskwarrior_context*

This is a source to show and manipulate task contexts. This will list all
known contexts and the counts of pending tasks in each context. It also lists
the "none" context, a special taskwarrior context that refers to having no
context set.

Actions~

open

Open all tasks with this context.

use

Open a task list and set the context to this context.

rename

Rename the context.

delete

Deletes the context.

edit

Alter the definition for this context.

------------------------------------------------------------------------------
taskwarrior/cmd                                        *unite-taskwarrior_cmd*

This is a source to run a specific command. The entries are all known
taskwarrior commands.

------------------------------------------------------------------------------
taskwarrior/new                                        *unite-taskwarrior_new*

Create a new task. The given text will be send as is to taskwarrior, to create
the task. This has all the same actions as |unite-taskwarrior-source|, but it
will create the task as needed.

------------------------------------------------------------------------------
taskwarrior/notes                                   *taskwarrior-source-notes*

A source that lets you browse the notes created by this plugin. This is
basically just the file kind from unite with some additions. For details on
that kind please look at |unite-kind-file|. One thing to note is that this
plugin does not delete notes on it's own. Because tasks can and are
manipulated outside this plugin I feel it is better to use a taskwarrior hook
to keep notes in sync with task status. This means the note list may be very
large and have many notes in it for old tasks.

Below are the new actions available in this source.

view

Show the task associated with this note. It will will show all the information
for that task.

------------------------------------------------------------------------------
taskwarrior/depends                                *unite-taskwarrior_depends*

This source allows for the addition of dependencies to tasks. This must be
given some parent task uuids as arguments when starting the source.

Actions~

add_dependency

Key <CR>

This is the default action and will mark the selected tasks as depdending upon
the parent tasks.

------------------------------------------------------------------------------
taskwarrior/tags                                      *unite-taskwarrior_tags*

This shows all known tags as well as their counts. Opening a task, which is
the default action will show all tasks with the given tag.

Actions~

open

Default key "<CR>". This will open a taskwarrior source for all tasks with this
tag. This is the default action.

rename

Gives a prompt to rename a tag. This will remove the previous tag and add a
new one to all tasks with this tag.

Key: "r"

------------------------------------------------------------------------------
taskwarrior/projects                              *unite-taskwarrior_projects*

This shows all known projects and their counts. Opening a project, which is
the default action, will show all tasks for that project.

Actions~

open

This will open the taskwarrior source for all tasks for this
project.

Key "<CR>"

rename

Gives a prompt to rename a project. This will assign all tasks in this project
to the new one.

Key: "r"

notes

Open the notes related to this project.

==============================================================================
Unite Filters                                      *unite-taskwarrior-filters*

We provide a few filters for sorting tasks and things in useful ways. They are
described below.

------------------------------------------------------------------------------
sorter_count                                  *unite-taskwarrior-sorter_count*

This sorts things by their count. It is used for sorting in the
|unite-taskwarrior_projects|, |unite-taskwarrior_tags| and
|unite-taskwarrior_context| sources.

------------------------------------------------------------------------------
sorter_task                                    *unite-taskwarrior-sorter_task*

This is used to sort tasks by a definition string like: 'project+,urgency-'. This
means to sort by project in ascending order and then urgency in descending
order. This idea is taken from taskwiki. This sorter is the default sorter for
the taskwiki source. It can be configured in this source by using the
'-custom_sorting' option. 

For example: >
        :Unite taskwarrior -custom_sorting='project+'
        :Unite taskwarrior -custom_sorting='due+,project-'
<

If no ordering is given it will use what is in
unite_taskwarrior-default-ordering. If that is empty it will not sort. It can
also accept a name and lookup the ordering. For example: >
        let g:unite_taskwarrior_sort_order = {"L": "project+,urgency-", "B": "project-"}
        :Unite taskwarrior -custom_sorting='L'
<

will sort by project in ascending order and then urgency in descending order.

This can also use taskwiki sorting definitions. For example: >

        let g:taskwiki_sort_orders={"T": "project+,due-"}

        :Unite taskwarrior -custom_sorting='T'
<

will is list tasks sorted by project, then due date. If there are orderings for
both this and taskwiki then the ones configured for unite-taskwarrior will take
priority.

The default sorting is configured by |unite_taskwarrior_default_ordering|.

==============================================================================
Common Actions                              *unite-taskwarrior-common-actions*

This adds an annotate action to the unite kinds specified in
|g:unite_taskwarrior_add_annotations| which defaults to ["common"]. The effect
of this is to make it possible to use the result of any unite source as an
annotation for tasks. This action takes one or more entries and then applies
them as annotations to one or more tasks. This task will open up a taskwarrior
source with all tasks and allow the selection of tasks. Once selected they
will be annotated.

==============================================================================
Note Files                                           *unite-taskwarrior-notes*

These are simple files to keep notes that don't fit into annotations. You can
open these by hitting 'o' for on a task. The files are stored in
|g:unite_taskwarrior_note_directory| and are named with the first 8 characters
of the task uuid and then the suffix given in
|g:unite_taskwarrior_note_suffix| Simply write any notes you desire in them
and then close save. This doesn't provide the ability to search note files,
nor does it delete them once a task is marked done. Searching then should be
possible using a Unite grep source that has been pointed to the correct
directory.

==============================================================================
Functions                                        *unite-taskwarrior-functions*

This has a lot of functions for interacting with taskwarrior. They are broken
into groups and described below.

------------------------------------------------------------------------------
Utility functions

This is a group of functions that are just for general utility, normalizing
strings, calling the taskwarrior program, parsing output etc.

unite#taskwarrior#trim(string)                        *unite#taskwarrior#trim*

Strip off leading and trailing whitespace from some string.

unite#taskwarrior#call(filter, cmd, ...)              *unite#taskwarrior#call*

Call the taskwarrior script using the given filter and command with any number
of arguments. The filter will be removed if it is "".

unite#taskwarrior#run({task}, cmd, ...)                *unite#taskwarrior#run*

Run a task command on the given task. The task is a task dictionary and the
command and other arguments are passed to |unite#taskwarrior#call|.

unite#taskwarrior#init()                              *unite#taskwarrior#init*

Setup things that are generally needed for taskwarrior. This should not need
to be called manually and will instead be called as needed. Right now all this
does is create the note directory as needed.

unite#taskwarrior#filter([strings], project)        *unite#taskwarrior#filter*

Create a list of filter strings from the given arguments. This will expand
things like "@bob" to "tag:bob" and "$name" to "project:name". If the project is
set to infer then it will add a filter string with
project:current-directory-name.

unite#taskwarrior#format({task})                    *unite#taskwarrior#format*

Turn a task into a string. This uses the format string in
|g:unite_taskwarrior_format_string| to generate a string to display.

unite#taskwarrior#parse(raw)                         *unite#taskwarrior#parse*

Parse the output of taskwarrior export to create a task dictionary. The
dictionary will contain all keys provided by export, but the tags and
annotations will be an empty list if none are given. In addition, the project
will be set to an empty string if none is provided.

unite#taskwarrior#select(pattern)                   *unite#taskwarrior#select*

Load all tasks that match the given patterns. This will generate the filter
string for the given pattern using |unite#taskwarrior#filter| then export all
tasks and parse them using |unite#taskwarrior#parse| into a list of dictionaries.
This will add the filter defined in |g:unite_taskwarrior_filter|

unite#taskwarrior#all()                                *unite#taskwarrior#all*

Load all tasks. This respects the default filter in
|g:unite_taskwarrior_filter|.

unite#taskwarrior#new(data)                            *unite#taskwarrior#new*

Create a new task with the given data. The data may be a list or a string. If it
is a string it string, it is split on whitespace and then used to generate the
tasks. If it is a list it is flattened and then used to generate the tasks.

                                                     *unite#taskwarrior#input*
unite#taskwarrior#input(args, use_range, line1, line2)

This is what is called by the |UniteTaskWarriorAdd| command. It will prompt for
a task description if an empty string is given to args and use_ranges is 0.

------------------------------------------------------------------------------
Task Functions

These are a set of functions which are use to manipulate tasks. The task data
structure is a dictionary that is very similar to the data structure produced by
task export. For detail on that see
http://taskwarrior.org/docs/design/task.html. This data structure is of the
form: >
{
  'description': "",            " Description of the task
  'depends': [],                " List of uuids this task depends on
  'status': 'unknown',          " Status of this task
  'tags': [],                   " List of tags for this task
  'project': '',                " Project for this task
  'annotations': [],            " List of annotations
  'start_time': '',             " Time when this was started
  'started': 0,                 " Flag if this task is started
  'stop_time': '',              " When this task was stopped
  'stopped': 0,                 " Flag if this task is not started
  'short': '',                  " First 8 characters of the uuid
  'uuid': '',                   " Uuid for this task
  'uri': '',                    " Computed uri for the task
  'urgency': 0.0,               " Urgency float
  'note': ''                    " Path to the note file
}
<

In general they take a task dictionary, and potentially other arguments, and
then run some task command. The task dictionary is the result of parsing the
output of export using *unite#taskwarrior#parse* and is not generally modified
by these functions.

unite#taskwarrior#do({task})                            *unite#taskwarrior#do*

Mark a task as done.

unite#taskwarrior#delete({task})                    *unite#taskwarrior#delete*

Mark a task as deleted.

unite#taskwarrior#modify({task}, [data])            *unite#taskwarrior#modify*

Run the modify command on one task. The data should be a list of strings which
are the arguments to the modify command.

unite#taskwarrior#rename({task}, description)       *unite#taskwarrior#rename*

Change the tasks description. The given description must be a string and will
be used as new description.

unite#taskwarrior#open({task})                        *unite#taskwarrior#open*

Open the note file associated with a task. If such a file does not exist it
will be created with a single line, the task description.

unite#taskwarrior#toggle({task})                    *unite#taskwarrior#toggle*

Toggle the status of a task. This is the default action. The toggling between
states is defined in |g:unite_taskwarrior_toggle_mapping| with a default of
toggling to "pending".

vim:tw=78:ts=8:ft=help:norl:
