*unite-taskwarrior.txt*  For |Vim version 7.3|         Last change: 2015 May 1

Author: Blake Sweeney
License: Same terms as vim itself (see |license|)

|CONTENTS|                                       |unite-taskwarrior-contents|

Installation                                     |unite-taskwarrior-install|
About                                            |unite-taskwarrior-about|
Usage                                            |unite-taskwarrior-usage|
  Commands                                       |unite-taskwarrior-commands|
  Variables                                      |unite-taskwarrior-variables|
  Unite Source                                   |unite-taskwarrior-sources|
    taskwarrior
    taskwarrior/tags
    taskwarrior/projects
    Common Actions
  Note Files                                     |unite-taskwarrior-notes|
  Functions                                      |unite-taskwarrior-functions|

==============================================================================
About                                            *unite-taskwarrior-about*

This is a unite source for taskwarrior, which provides a way to browse and
manipulate taskwarrior tasks from inside vim. It uses |unite.vim| as the
interface.

==============================================================================
Installation                                     *unite-taskwarrior-install*

Copy files into the correct places, or just use a package manager.

==============================================================================
Usage                                            *unite-taskwarrior-usage*

This does not come with any key bindings. Personally I find the follow ones
very useful:

In my |vimrc|:
>
  call unite#custom#source('taskwarrior', 'matchers', 'matcher_fuzzy')
  call unite#custom#source('taskwarrior', 'sorters', 'sorter_rank')

  nnoremap <silent>  <Leader>T :Unite taskwarrior -winheight=50<CR>
  nnoremap           <Leader>Ta :UniteTaskWarriorAdd<CR>
  vnoremap <silent>  <Leader>Ta :B UniteTaskWarriorAdd<CR>
>

This makes my listing show the pending tasks and gives me useful mappings to
open and add tasks. Also, by using the matcher and sorder I get a nice
responsive search in my tasks.

In `ftplugin/unite.vim`:
>
  inoremap <silent><buffer><expr> <C-t> unite#do_action('edit_tag')
  nnoremap <silent><buffer><expr> <C-t> unite#do_action('edit_tag')
<

This lets me edit the tags quickly. I end up doing this a lot so it's useful
to have.

==============================================================================
Commands                                         *unite-taskwarrior-commands*

UniteTaskWarriorAdd                              *UniteTaskWarriorAdd*

This command can create a new task. If run with no arguments and no visual
selection it will prompt for a new task description, which it will then
create. If run with a visual selection it will use the selection as the
description. Vim will pass the entire line, not just the selected section to
this command when using a visual selection. This could lead to undesired
behavior, if you want to only use the selected region then you should install
the vis plugin, which will allow you to send only the selected region to this
command. Finally if this run with arguments they will be used as the task
description. Below are a couple examples of creating a task using arguments.

Examples:

>
  " Create a new task 'Some new task'
  :UniteTaskWarriorAdd Some new task

  " Create a new task for project1
  :UniteTaskWarriorAdd A new task for project:project1

  " Create a new task with tag bob
  :UniteTaskWarriorAdd A task tag:bob

  " Create a new task with tags and a project
  :UniteTaskWarriorAdd Another new task tag:bob project:something
<

These examples only show adding tags and projects but all of the normal
taskwarrior syntax should be respected.

==============================================================================
Variables                                        *unite-taskwarrior-variables*

*g:unite_taskwarrior_command*

The command to use to call taskwarrior.

Default: "task"

*g:unite_taskwarrior_note_directory*

Define the directory that all notes will reside in.

Default: "~/.task/note"

*g:unite_taskwarrior_note_suffix*

Define the suffix for the note file.

Default: "mkd"

*g:unite_taskwarrior_format_string*

This is the string to use for formatting tasks.

*g:unite_taskwarrior_tag_format_string*

This is the string to use when formatting for the taskwarrior/tags source. The
string will be used as the format string for |printf()| and the arguments are the
tag name and the count. The default creates a 20 character column for the name,
a tab, and then a 5 character column for the count.

Default: "20s\t%5s"

*g:unite_taskwarrior_project_format_string*

This is the string to use when formatting for the taskwarrior/project source.
The string will be used as the format string for |printf()| with the project
name and count.  The default creates a 20 character project column followed by
a tab and then a 5 character column for the count.

Default: "%20s\t%5s"

*g:unite_taskwarrior_formatter*

This should be a string of the function name to use for formatting a task for
display in unite. The function specified should take as input a task dictionary
and return the string to display.

Default: "unite#taskwarrior#format"

*g:unite_taskwarrior_tag_formatter*

The name of the function to use for formatting tags for display in the
taskwarrior/tags source. This function should take a tag data structure and
return a string to display. The default function uses
|g:unite_taskwarrior_tag_format_string|

Default: "unite#taskwarrior#tags#format"

*g:unite_taskwarrior_project_formatter*

The name of the function to use for formatting projects for display in the
taskwarrior/projects source. The function should take a project dictionary and
return the string to display. The default function uses the
|g:unite_taskwarrior_project_format_string|

Default: "unite#taskwarrior#projects#format"

*g:unite_taskwarrior_filter*

The default filter string to use for loading tasks.

Default: "status:pending"

*g:unite_taskwarrior_toggle_mapping*

This is a dictionary specifying the transitions to use when toggling. The keys
are the current state and the values are the state to transition to. All keys
and values should be valid states for tasks.

Default: { "pending", "completed", "completed": "pending" }

*g:unite_taskwarrior_status_mapping*

This is a dictonary is used to map from a status to the symbol to use when
displaying a task. 

*g:unite_taskwarrior_projects_abbr*

The string to use as an abrivation for project in the listing.

Default: "$"

*g:unite_taskwarrior_tags_abbr*

The abbreviation string to use for tags. This

Default: "@"

*g:unite_taskwarrior_add_annotations*

The unite kinds to add an annotation action to. For details of what this does
see common actions below.

Default: ["common"]

==============================================================================
Unite Sources                                      *unite-taskwarrior-sources*

This provides several different unite sources as well as modifying unite
sources to add an annotation action.

------------------------------------------------------------------------------
taskwarrior  *unite-taskwarrior-source-taskwarrior*

This source shows tasks using they description, state, tags and project.

Actions~

open

Open a note file for this task. For details on note files, see
|unite-taskwarrior-notes|

Key: "o"

preview

Preview the note file for this task.

Key: "p"

edit

Edit the description of this task. This will prompt for a new description.

Key: "e"

edit_tag

Edit the tags for one or more tasks. This will prompt for a comma seperated
string where each part is a tag to assign to the task.

edit_proj

Edit the project for one or more tasks. This will prompt for a project to
assign to the tasks.

do

Mark one or more tasks as done.

Key: "<CR>"

delete

Mark one or more tasks as deleted.

toggle

Toggle state of one or more tasks.

modify

Run a modification on one or more tasks. This will prompt for some
modification string and pass that to taskwarrior. This should respect the
standard taskwarrior syntax.

annotate

Add an annotation to one or more tasks. This will prompt for some annotation and add it
to the selected tasks.

start

Start a task. Will mark the task as started in taskwarrior.

stop

Stop a task. Will mark the task as stopped in taskwarrior.

yank

This will yank the uuid of a task.

yank_uri

Yank a task uri.

view

Show detailed information about this task. The

Key: "v"

------------------------------------------------------------------------------
taskwarrior/tags  *unite-taskwarrior-source-tags*

This shows all known tags as well as their counts. Opening a task, which is
the default action will show all tasks with the given tag.

Actions~

open

Default key "<CR>". This will open a taskwarrior source for all tasks with this
tag.

rename

Gives a prompt to rename a tag. This will remove the previous tag and add a
new one to all tasks with this tag.

Key: "r"

------------------------------------------------------------------------------
taskwarrior/projects  *unite-taskwarrior-source-projects*

This shows all known projects and their counts. Opening a project, which is
the default action, will show all tasks for that project.

Actions~

open

This will open the taskwarrior source for all tasks for this
project.

Key "<CR>"

rename

Gives a prompt to rename a project. This will assign all tasks in this project
to the new one.

Key: "r"

------------------------------------------------------------------------------
Common actions                                   *unite-taskwarrior-common-actions*

This adds an annotate action to the unite kinds specified in
|g:unite_taskwarrior_add_annotations| which defaults to ["common"]. The effect
of this is to make it possible to use the result of any unite source as an
annotation for tasks. This action takes one or more entries and then applies
them as annotations to one or more tasks. This task will open up a taskwarrior
source with all tasks and allow the selection of tasks. Once selected they
will be annotated. 

==============================================================================
Note Files                                       *unite-taskwarrior-notes*

These are simple files to keep notes that don't fit into annotations. You can
open these by hitting 'o' for on a task. The files are stored in
|g:unite_taskwarrior_note_directory| and are named with the first 8 characters
of the task uuid and then the suffix given in |g:unite_taskwarrior_note_suffix|
Simply write any notes you desire in them and then close save. This doesn't
provide the ability to search note files, nor does it delete them once a task is
marked done. Searching then should be possible using a Unite grep source that
has been pointed to the correct directory.

==============================================================================
Functions                                        *unite-taskwarrior-functions*

This has some utility functions and task manipulation functions. Below is a
listing of all functions.

------------------------------------------------------------------------------
Utility functions

This is a group of functions that are just for general utility, normalizing
strings, calling the taskwarrior program, parsing output etc.

unite#taskwarrior#trim(string)                   *unite#taskwarrior#trim*

Strip off leading and trailing whitespace from some string.

unite#taskwarrior#call(filter, cmd, ...)         *unite#taskwarrior#call*

Call the taskwarrior script using the given filter and command with any number
of arguments. The filter will be removed if it is "".

unite#taskwarrior#run({task}, cmd, ...)          *unite#taskwarrior#run*

Run a task command on the given task. The task is a task dictonary and the
command and other arguments are passed to *unite#taskwarrior#call*

unite#taskwarrior#init()                         *unite#taskwarrior#init*

Setup things that are generally needed for taskwarrior. This should not need
to be called manually and will instead be called as needed. Right now all this
does is create the note directory as needed.

unite#taskwarrior#filter([strings], project)     *unite#taskwarrior#filter*

Create a list of filter strings from the given arguments. This will expand
things like "@bob" to "tag:bob" and "$name" to "project:name". If the project is
set to infer then it will add a filter string with
project:current-directory-name.

unite#taskwarrior#format({task})                 *unite#taskwarrior#format*

Turn a task into a string. This uses the format string in
|g:unite_taskwarrior_format_string| to generate a string to display.

unite#taskwarrior#parse(raw)                     *unite#taskwarrior#parse*

Parse the output of taskwarrior export to create a task dictionary. The
dictionary will contain all keys provided by export, but the tags and
annotations will be an empty list if none are given. In addition, the project
will be set to an empty string if none is provided. 

unite#taskwarrior#select([pattern])                *unite#taskwarrior#select*

Load all tasks that match the given patterns. This will generate the filter
string for the given pattern using |unite#taskwarrior#filter| then export all
tasks and parse them using |unite#taskwarrior#parse| into a list of dictonaries.
This will add the filter defined in |g:unite_taskwarrior_filter|

unite#taskwarrior#all()                          *unite#taskwarrior#all*

Load all tasks. This respects the default filter in |g:unite_taskwarrior_filter|

unite#taskwarrior#new(data)                      *unite#taskwarrior#new*

Create a new task with the given data. The data may be a list or a string. If it
is a string it string, it is split on whitespace and then used to generate the
tasks. If it is a list it is flattened and then used to generate the tasks.

                                                 *unite#taskwarrior#input*
unite#taskwarrior#input(args, use_range, line1, line2)

This is what is called by the |UniteTaskWarriorAdd| command. It will prompt for
a task description if an empty string is given to args and use_ranges is 0.

------------------------------------------------------------------------------
Task Manipulation Functions

These are a set of functions which are use to manipulate tasks. In general
they take a task dictionary, and potentially other arguments, and then run
some task command. The task dictionary is the result of parsing the output of
export using *unite#taskwarrior#parse* and is not generally modified by these
functions. 

unite#taskwarrior#do({task})                     *unite#taskwarrior#do*

Mark a task as done.

unite#taskwarrior#delete({task})                 *unite#taskwarrior#delete*

Mark a task as deleted.

unite#taskwarrior#modify({task}, [data])         *unite#taskwarrior#modify*

Run the modify command on one task. The data should be a list of strings which
are the arguments to the modify command.

unite#taskwarrior#rename({task}, description)    *unite#taskwarrior#rename*

Change the tasks description. The given description must be a string and will
be used as new description

unite#taskwarrior#open({task})                   *unite#taskwarrior#open*

Open the note file associated with a task. If such a file does not exist it
will be created with a single line, the task description.

unite#taskwarrior#toggle({task})                 *unite#taskwarrior#toggle*

Toggle the status of a task. This is the default action. The toggling between
states is defined in |g:unite_taskwarrior_toggle_mapping| with a default of
toggling to "pending".

vim:tw=78:ts=8:ft=help:norl:
